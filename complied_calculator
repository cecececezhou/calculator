// calculator01.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
/*#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<cmath>*/
#include "std_lib_facilities.h"
//using namespace std;
//inline void keep_window_open() { char ch; cin >> ch; }

const char number = '8';    // t.kind==number means that t is a number Token
const char quit = 'q';    // t.kind==quit means that t is a quit Token
const char print = ';';    // t.kind==print means that t is a print Token
const char name = 'a';    // name token
const char let = 'L';    // declaration token
const char con = 'C';    // const declaration token
const string declkey = "let";		// declaration keyword 
const string constkey = "const";	// const keyword
const string prompt = "> ";
const string result = "= "; // used to indicate that what follows is a result

class Token {
public:
	char kind;
	double value;
	string name;
	Token(char ch) : kind(ch), value(0) {}
	Token(char ch, double val) : kind(ch), value(val) {}
	Token(char ch, string n) : kind(ch), name(n) {}
};
class Token_stream {
public:
	Token_stream();   // make a Token_stream that reads from cin
	Token get();      // get a Token (get() is defined elsewhere)
	void putback(Token t);    // put a Token back
	void ignore(char c);      // discard tokens up to an including a c
private:
	bool full;        // is there a Token in the buffer?
	Token buffer;     // here is where we keep a Token put back using putback()
};

//------------------------------------------------------------------------------

// The constructor just sets full to indicate that the buffer is empty:
Token_stream::Token_stream()
	:full(false), buffer(0)    // no Token in buffer
{
}

void Token_stream::putback(Token t) {
	//	if (full) error("putback() into a full buffer");
	buffer = t;
	full = true;
}
Token Token_stream::get() {
	if (full) {
		full = false;
		return buffer;
	}
	return 0;
	char ch;
	cin >> ch;

	switch (ch) {
	case';':
	case'q':
	case '(':case ')':case '+':case '-':case '*':case '/':
		return Token(ch);
	case '0':case '1':case '2':case '3':case '4':case '5':
	case '6':case '7':case '8':case '9':case '.':
	{	cin.putback(ch);
	double val;
	cin >> val;
	return Token{ '8',val };
	}

	default:
		error("bad token");
	}
}
void Token_stream::ignore(char c)
// c represents the kind of a Token
{
	// first look in buffer:
	if (full && c == buffer.kind) {
		full = false;
		return;
	}
	full = false;

	// now search input:
	char ch = 0;
	while (cin >> ch)
		if (ch == c) return;
}
Token_stream ts;
//------------------------------------------------------------------------------

class Variable {
public:
	string name;
	double value;
	bool var;	// variable (true) or constant (false)
	Variable(string n, double v, bool va = true) :name(n), value(v), var(va) { }
};

//------------------------------------------------------------------------------

vector<Variable> var_table;

//------------------------------------------------------------------------------

double get_value(string s)
// return the value of the Variable names s
{
	for (int i = 0; i<var_table.size(); ++i)
		if (var_table[i].name == s) return var_table[i].value;
	error("get: undefined variable ", s);
}

//------------------------------------------------------------------------------

void set_value(string s, double d)
// set the Variable named s to d
{
	for (int i = 0; i<var_table.size(); ++i)
		if (var_table[i].name == s) {
			if (var_table[i].var == false) error(s, " is a constant");
			var_table[i].value = d;
			return;
		}
	error("set: undefined variable ", s);
}

//------------------------------------------------------------------------------

bool is_declared(string var)
// is var already in var_table?
{
	for (int i = 0; i<var_table.size(); ++i)
		if (var_table[i].name == var) return true;
	return false;
}

//------------------------------------------------------------------------------

double define_name(string s, double val, bool var = true)
// add (s,val,var) to var_table
{
	if (is_declared(s)) error(s, " declared twice");
	var_table.push_back(Variable(s, val, var));
	return val;
}

double expression();

double primary() {
	Token t = ts.get();
	switch (t.kind) {
	case'(':
	{	double d = expression();
	t = ts.get();
	//	if (t.kind != ')') error("')'expected");
	return d;
	}
	case'8':return t.value;

	default:
		error("primary expected");
	}return 0;
}
double term() {
	double left = primary();
	Token t = ts.get();

	while (true) {//while(true) could not be recognized at first?...
		switch (t.kind) {
		case'*':
			left *= primary();
			t = ts.get();
			break;
		case'/':
		{	double d = primary();
		//if (d == 0) error("divide by 0");
		left /= d;
		t = ts.get();
		break;
		}
		default:
			ts.putback(t);
			return left;

		}
	}
}
double expression() {
	double left = term();
	Token t = ts.get();

	while (true) {
		switch (t.kind) {
		case'+':
			left += term();
			t = ts.get();
			break;
		case'-':
			left -= term();
			t = ts.get();
			break;
		default:
			ts.putback(t);
			return left;
		}
	}
}
double declaration(Token k)
// handle: name = expression
// declare a variable called "name" with the initial value "expression"
// k will be "let" or "con"(stant)
{
	Token t = ts.get();
	if (t.kind != name) error("name expected in declaration");
	string var_name = t.name;

	Token t2 = ts.get();
	if (t2.kind != '=') error("= missing in declaration of ", var_name);

	double d = expression();
	define_name(var_name, d, k.kind == let);
	return d;
}
double statement()
{
	Token t = ts.get();
	switch (t.kind) {
	case let:
	case con:
		return declaration(t.kind);
	default:
		ts.putback(t);
		return expression();
	}
}
void clean_up_mess()
{
	ts.ignore(print);
}
void calculate()
{
	while (cin)
		try {
		cout << prompt;
		Token t = ts.get();
		while (t.kind == print) t = ts.get();    // first discard all "prints"
		if (t.kind == quit) return;        // quit
		ts.putback(t);
		cout << result << statement() << endl;
	}
	catch (exception& e) {
		cerr << e.what() << endl;        // write error message
		clean_up_mess();
	}
}
int main()

//cout << "This calculator can handle +, -, *, and /:\n";
try {
	// predefine names:
		define_name("pi", 3.1415926535, false);	// these pre-defiend names are constants
	define_name("e", 2.7182818284, false);

	calculate();

	keep_window_open();    // cope with Windows console mode
	return 0;
	}

catch (exception e) {
	cerr << e.what() << '\n';
	keep_window_open();
	return 1;
}
catch (...) {
	cerr << "exception\n";
	keep_window_open();
	return 2;
}




